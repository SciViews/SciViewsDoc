# Using R

```{r, include=FALSE}
if (!"SciViews:R" %in% search())
  source("R/SciViews.R", attach(NULL, name = "SciViews:R"))
```

R can be used in different way, but it is generally used interactively at the **command line**\index{command line}. We will thus discover this computing language by interacting at a **console** or **terminal** that uses the command line interface.

## Command line

Being in Rgui (Windows), R.app (MacOS), a terminal, RStudio, VScode ... you can interact with an R process in a question and answer way. R shows that it is ready to process next instruction by a **prompt** at the beginning of a line (\>). You enter the instruction on one or several lines. In this case, the prompt changes into (+) to show that R waits for more. Once the instruction is complete, it is processed by R and the result is printed in the console, or has side-effects, like creating a plot, for instance. Then R goes back to the prompt and is ready for next instruction.

For instance, this is a simple session in R:

```{r}
1 + 1
mean(1:4) # Mean of 1, 2, 3 and 4
```

The user entered two instructions: `1 + 1` and `mean(1:4)` . R responded each time with the result.

To enter a comment, you use the hashtag `#` and everything that follows it on the line is considered as comments and not interpreted by R.

We used here three functions:

-   The addition `r fn_list("+", "+", "math", "addition (binary or unary)")`,

-   The colon `r fn_list(":", ":", "ops")` operator that generates regular sequences,

-   The `r fn_list("mean()", "base::mean(), collapse::mean()", "summary", "With argument na.rm = TRUE by default")` function that calculates the average of a vector of numbers (here, the sequence 1, 2, 3, 4 generated by the colon operator.

In R, you can **assign** any result to a **name** or **symbol** using the assignation operator `r fn_list("<-", "<-", "ops")` made by the combination of a "lower than" and a "minus" characters depicting an arrow in the direction where the assignation is done. with an assignation instruction, nothing is printed. The name could be any set of characters starting with a character \[a-zA-Z\] or a dot "." and optionally followed by one or more characters, digits \[0-9\], a dot "." or an underscore "\_". Just using a name in an instruction prints its content:

```{r}
res1 <- 1 + 1
res1
```

You can also use so-called *non-syntactically correct* names if you enclose them inside backticks "\`":

```{r}
`+non syntactically correct name` <- 1 + 2
`+non syntactically correct name`
```

Next section will present describe the rudiments of the R language.
